continue
api_v1_loans_path(params)
params
PATH
path
continue
path_base
params
continue
loans.where(filter_field => filter_range[0]..filter_range[1]).count
loans.where(filter_field => filter_range[0]..filter_range[1])
continue
self.model
self.models
@models
models
@options
self.options
options
exit
x
e
end
self[:options]
self.option
self.options
self.model
self.objects
self.object
self.attributes
self
self.path
path
parts
@object
@objects
objects
self.class
related_object_serializer
@base_url
@context
@object
methods
object
self
continue
self
serializer
options
attr_data
self.options
options
continue
fields = params["fields"]["loan"].split(",").map{|f|f.to_sym}
loans.map{|r| r.to_hash }
loans.map{|r| r.to_h }
loans.map{|r| r }
loans.map{|r| Hash.new(r) }
loans.map{|r| Hash.new(r).keep_if{|k,v| fields.include? k} }
fields = params["fields"]["loan"].split(",").map{|f|f.to_sym}
fields = params["fields"]["loan"].map{|f|f.to_sym}
loans.map{|r| Hash.new(r).keep_if{|k,v| fields.include? k} }
loans.map{|r| r.keep_if{|k,v| fields.include? k} }
loans.map{|r| r.to_h.keep_if{|k,v| fields.include? k} }
loans.map{|r| r.to_h.keep_if{|k,v| fields.include? k}
loans
params["fields"]["loan"]
params["fields"].first
params["fields"]
params
hh
hhh
hhh = h
h
hh
h
hh
h = hh.keep_if{|k,v|[:a,:b].include? k}
h = hh.keep_if [:a,:b]
h = hh.keep_if[:a,:b]
hh = {a:1, b:2, c:3}
loans
Loan.create r
r
r.delete "id"
r
page.form("form1").buttons.select{|b|b.value=="Next"}
page.form("form1").buttons.search("[value='Next']")
page.form("form1").buttons.find("[value='Next']")
page.form("form1").buttons.find("value='Next'")
page.form("form1").buttons("next")
page.form("form1").buttons
page.form("form1")
[nil].first
[].first
puts "hi" if [].first
puts "hi" if []
next_button.first.value
next_button.first
next_button
data_table[4].search("td").count
data_table[4].search("td")[2].text
data_table[4].search("td")[1].text
data_table[4].search("td")[0].text
data_table[4].search("td")[0]
data_table[4].search("td")
data_table[4].children[3]
data_table[4].children[2]
data_table[4].children[0]
data_table[4].children
data_table[4]
data_table[4][5]
data_table[4][4]
data_table[4][3]
data_table[4][2]
data_table[4][1]
data_table[4].first
data_table[4]
